{
	"name": "df_orders_set_bronze_to_silver",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_bronze_orders",
						"type": "DatasetReference"
					},
					"name": "ordersSource"
				},
				{
					"dataset": {
						"referenceName": "ds_bronze_customers",
						"type": "DatasetReference"
					},
					"name": "customersSource"
				},
				{
					"dataset": {
						"referenceName": "ds_bronze_products",
						"type": "DatasetReference"
					},
					"name": "productsSource"
				},
				{
					"dataset": {
						"referenceName": "ds_bronze_stores",
						"type": "DatasetReference"
					},
					"name": "storesSource"
				},
				{
					"dataset": {
						"referenceName": "ds_bronze_order_items",
						"type": "DatasetReference"
					},
					"name": "orderItemSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_cleansed_orders",
						"type": "DatasetReference"
					},
					"name": "ordersTarget"
				},
				{
					"dataset": {
						"referenceName": "ds_cleansed_customers",
						"type": "DatasetReference"
					},
					"name": "targetCustomers"
				},
				{
					"dataset": {
						"referenceName": "ds_cleansed_products",
						"type": "DatasetReference"
					},
					"name": "productsTarget"
				},
				{
					"dataset": {
						"referenceName": "ds_cleansed_stores",
						"type": "DatasetReference"
					},
					"name": "storesTarget"
				},
				{
					"dataset": {
						"referenceName": "ds_cleansed_order_items",
						"type": "DatasetReference"
					},
					"name": "orderItemTarget"
				}
			],
			"transformations": [
				{
					"name": "derivedColumns",
					"description": "changing order_datetime to order_date and add the new column update_timestamp"
				},
				{
					"name": "Selection"
				},
				{
					"name": "datatypeconversion"
				},
				{
					"name": "derivedColumn",
					"description": "adding a new column updated timestamp"
				},
				{
					"name": "datatypechangeforcustid"
				},
				{
					"name": "dtypeConvertion"
				},
				{
					"name": "updatedtimestamp"
				},
				{
					"name": "Additionofcolumn"
				},
				{
					"name": "typeConvertion"
				},
				{
					"name": "selectionOfCol"
				},
				{
					"name": "Columnaddon"
				},
				{
					"name": "typConvertion"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ORDER_ID as string,",
				"          ORDER_DATETIME as string,",
				"          CUSTOMER_ID as string,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ordersSource",
				"source(output(",
				"          CUSTOMER_ID as string,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> customersSource",
				"source(output(",
				"          PRODUCT_ID as string,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> productsSource",
				"source(output(",
				"          STORE_ID as string,",
				"          STORE_NAME as string,",
				"          WEB_ADDRESS as string,",
				"          LATITUDE as string,",
				"          LONGITUDE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> storesSource",
				"source(output(",
				"          ORDER_ID as string,",
				"          LINE_ITEM_ID as string,",
				"          PRODUCT_ID as string,",
				"          UNIT_PRICE as string,",
				"          QUANTITY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> orderItemSource",
				"ordersSource derive(ORDER_DATE = toDate(ORDER_DATETIME,'yyyy-MM-dd'),",
				"          UPDATED_TIMESTAMP = currentUTC()) ~> derivedColumns",
				"derivedColumns select(mapColumn(",
				"          ORDER_ID,",
				"          ORDER_DATE,",
				"          CUSTOMER_ID,",
				"          ORDER_STATUS,",
				"          STORE_ID,",
				"          UPDATED_TIMESTAMP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Selection",
				"Selection cast(output(",
				"          ORDER_ID as integer,",
				"          CUSTOMER_ID as integer,",
				"          STORE_ID as integer",
				"     ),",
				"     errors: true) ~> datatypeconversion",
				"customersSource derive(UPDATED_TIMESTAMP = currentUTC()) ~> derivedColumn",
				"derivedColumn cast(output(",
				"          CUSTOMER_ID as integer",
				"     ),",
				"     errors: true) ~> datatypechangeforcustid",
				"productsSource cast(output(",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as double",
				"     ),",
				"     errors: true) ~> dtypeConvertion",
				"dtypeConvertion derive(UPDATED_TIMESTAMP = currentUTC()) ~> updatedtimestamp",
				"storesSource derive(UPDATED_TIMESTAMP = currentUTC()) ~> Additionofcolumn",
				"Additionofcolumn cast(output(",
				"          STORE_ID as integer,",
				"          LATITUDE as double,",
				"          LONGITUDE as double",
				"     ),",
				"     errors: true) ~> typeConvertion",
				"typeConvertion select(mapColumn(",
				"          STORE_ID,",
				"          STORE_NAME,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          UPDATED_TIMESTAMP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectionOfCol",
				"orderItemSource derive(UPDATED_TIMESTAMP = currentUTC()) ~> Columnaddon",
				"Columnaddon cast(output(",
				"          ORDER_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as integer",
				"     ),",
				"     errors: true) ~> typConvertion",
				"typConvertion select(mapColumn(",
				"          ORDER_ID,",
				"          PRODUCT_ID,",
				"          UNIT_PRICE,",
				"          QUANTITY,",
				"          UPDATED_TIMESTAMP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"datatypeconversion sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ordersTarget",
				"datatypechangeforcustid sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> targetCustomers",
				"updatedtimestamp sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> productsTarget",
				"selectionOfCol sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> storesTarget",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> orderItemTarget"
			]
		}
	}
}