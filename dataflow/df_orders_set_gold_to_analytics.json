{
	"name": "df_orders_set_gold_to_analytics",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_structured_orders",
						"type": "DatasetReference"
					},
					"name": "ordersSource"
				},
				{
					"dataset": {
						"referenceName": "ds_structured_products",
						"type": "DatasetReference"
					},
					"name": "productsSource"
				},
				{
					"dataset": {
						"referenceName": "ds_structured_orders",
						"type": "DatasetReference"
					},
					"name": "ordersource"
				},
				{
					"dataset": {
						"referenceName": "ds_structured_stores",
						"type": "DatasetReference"
					},
					"name": "storesSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_analytics_product_orders",
						"type": "DatasetReference"
					},
					"name": "ProductOrdersTarget"
				},
				{
					"dataset": {
						"referenceName": "ds_analytics_store_orders",
						"type": "DatasetReference"
					},
					"name": "storeOrdersTarget"
				}
			],
			"transformations": [
				{
					"name": "innerJoin"
				},
				{
					"name": "select1"
				},
				{
					"name": "cast1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select2"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "orderJoinStores"
				},
				{
					"name": "cast2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select3"
				},
				{
					"name": "aggregate2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ORDER_ID as integer,",
				"          ORDER_DATE as date,",
				"          CUSTOMER_ID as integer,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as integer,",
				"          SUBTOTAL as double,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ordersSource",
				"source(output(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as double,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> productsSource",
				"source(output(",
				"          ORDER_ID as integer,",
				"          ORDER_DATE as date,",
				"          CUSTOMER_ID as integer,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as integer,",
				"          SUBTOTAL as double,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ordersource",
				"source(output(",
				"          STORE_ID as integer,",
				"          STORE_NAME as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> storesSource",
				"ordersSource, productsSource join(ordersSource@PRODUCT_ID == productsSource@PRODUCT_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerJoin",
				"innerJoin select(mapColumn(",
				"          ORDER_DATE,",
				"          ORDER_STATUS,",
				"          SUBTOTAL,",
				"          PRODUCT_NAME",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 cast(output(",
				"          ORDER_DATE as string",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 derive(MONTH_YEAR = substring(ORDER_DATE, 6, 2) + '-' + substring(ORDER_DATE, 1, 4)\r",
				") ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          PRODUCT_NAME,",
				"          MONTH_YEAR,",
				"          ORDER_STATUS,",
				"          SUBTOTAL",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 aggregate(groupBy(ORDER_STATUS,",
				"          PRODUCT_NAME,",
				"          MONTH_YEAR),",
				"     TOTAL_AMOUNT = sum(toDecimal(SUBTOTAL, 10, 2))) ~> aggregate1",
				"ordersource, storesSource join(ordersource@STORE_ID == storesSource@STORE_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> orderJoinStores",
				"orderJoinStores cast(output(",
				"          ORDER_DATE as string",
				"     ),",
				"     errors: true) ~> cast2",
				"cast2 derive(MONTH_YEAR = substring(ORDER_DATE, 6, 2) + '-' + substring(ORDER_DATE, 1, 4)) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          STORE_NAME,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          ORDER_STATUS,",
				"          MONTH_YEAR,",
				"          SUBTOTAL",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 aggregate(groupBy(STORE_NAME,",
				"          LATITUDE,",
				"          ORDER_STATUS,",
				"          LONGITUDE,",
				"          MONTH_YEAR),",
				"     TOTAL_AMOUNT = sum(toDecimal(SUBTOTAL, 10, 2))) ~> aggregate2",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ProductOrdersTarget",
				"aggregate2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> storeOrdersTarget"
			]
		}
	}
}